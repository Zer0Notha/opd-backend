// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String           @id @default(uuid()) @db.Uuid
  firstName          String
  secondName         String
  patronymic         String           @default("")
  email              String           @unique @db.Citext
  vk                 String           
  password           String
  groupId            String           @db.Uuid
  group              Group            @relation(fields: [groupId], references: [id], onDelete: Cascade)
  role               Role             @default(student)
  profileGrades      String[]
  allowWatchMyGrades Boolean          @default(false)
  projects           UserProjects[]
  mentoring          Project[]        @relation(name: "MentorsOfProject")
  managing           Project[]        @relation(name: "ManagerOfProject")
  reports            ProjectReports[] @relation(name: "ReportAuthor")
  requests           ProjectRequest[]

  token Token?
}

model Project {
  id           String           @id @default(uuid()) @db.Uuid
  name         String
  description  String
  poster       String
  type         ProjectType
  maxUserNum   Int
  problem      String
  wayOfSolving String
  status       ProjectStatus
  managerId    String           @db.Uuid
  manager      User             @relation(name: "ManagerOfProject", fields: [managerId], references: [id], onDelete: Cascade)
  mentors      User[]           @relation(name: "MentorsOfProject")
  reports      ProjectReports[]
  team         UserProjects[]
  requests     ProjectRequest[]
}

model UserProjects {
  id        String  @id @default(uuid()) @db.Uuid
  userId    String  @db.Uuid
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectId String  @db.Uuid
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model ProjectReports {
  id       String   @id @default(uuid()) @db.Uuid
  date     DateTime
  author   User     @relation(name: "ReportAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  authorId String   @db.Uuid

  text       String
  projectId  String      @db.Uuid
  project    Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  reportFile ReportFile?
}

model ReportFile {
  id String @id @default(uuid()) @db.Uuid
  name     String         @unique
  path     String         @unique
  reportId String         @unique @db.Uuid
  report   ProjectReports @relation(fields: [reportId], references: [id], onDelete: Cascade)
}

model ProjectRequest {
  id        String               @id @default(uuid()) @db.Uuid
  userId    String               @db.Uuid
  user      User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectId String               @db.Uuid
  project   Project              @relation(fields: [projectId], references: [id], onDelete: Cascade)
  priority  Int
  status    ProjectRequestStatus
  hasAnotherApprovedRequests    Boolean   @default(false)
}

model Group {
  id           String    @id @default(uuid()) @db.Uuid
  name         String    @default("")
  enteringYear String
  foreign      Boolean   @default(false)
  type         GroupType
  users        User[]
}

model Token {
  id           String @id @default(uuid()) @db.Uuid
  userId       String @unique @db.Uuid
  user         User   @relation(fields: [userId], references: [id])
  refreshToken String
}

enum Role {
  student
  teacher
  admin
  mentor
}

enum ProjectType {
  scientific
  technical
  service
}

enum ProjectStatus {
  not_confirmed
  opened
  closed
  rejected
}

enum ProjectRequestStatus {
  confirmed
  rejected
  working
}

enum GroupType {
  bachelor
  master
  specialist
  phd
}
